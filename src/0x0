#!/bin/sh
#
# Copyright (c) 2020 Olav Fosse
#
# Permission to use, copy, modify, and distribute this software for any purpose
# with or without fee is hereby granted, provided that the above copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#

# ---Constants---
USAGE="$(cat << EOF
usage:	0x0 file [-nv] filename
	0x0 url [-nv] URL
	0x0 shorten [-nv] URL
EOF
)"

verbose=false
execute=true

# ---Helpers---
is_valid_url() {
	url="$1"

	case "$url" in
		http://*.* | https://*.* )
			;;
		* )
			return 1
	esac
}

exit_with_error() {
	message="$1"

	printf '%s\n' "$message" 1>&2
	exit 1
}

get_full_status_code() {
	numeral_status_code="$1"

	case "$numeral_status_code" in
		400)
			printf '400 Bad Request'
			;;
		403)
			printf '403 Forbidden'
			;;
		500)
			printf '500 Internal Server Error'
			;;
		*)
			# Fallback to numeral status code
			printf '%s' "$1"
	esac
}

form_string() {
	# Returns properly escaped form string. See curl(1)
	type="$1" # file/url/shorten
	file_or_url="$2"

	# shellcheck disable=SC2039
	if [ "$type" = file ]; then
		printf -- '-Ffile=@"%s"' "$file_or_url"
	else
		printf -- '-F%s="%s"' "$type" "$file_or_url"
	fi
}

request() {
	type="$1"
	file_or_url="$2"

	form_string="$(form_string "$type" "$file_or_url")"

	if "$verbose"; then
		echo "\$ curl -Ss -w 'status_code=%{http_code}' https://0x0.st "$form_string""
	fi
	if "$execute"; then
		output="$(curl -Ss -w 'status_code=%{http_code}' https://0x0.st "$form_string")" || exit 1
		code="$(echo "$output" | tail -n 1 |  sed s/status_code=//g)"
		response="$(echo "$output" | grep -vE 'status_code=.*')" # Remove status_code line

		case "$code" in
			4** | 5**)
				exit_with_error "error: $(get_full_status_code "$code")"
				;;
			*)
				echo "$response"
		esac
	fi
}

# ---Dispatch handlers---
dispatch_file() {
	[ "$#" = 1 ] || exit_with_error "$USAGE"

	file="$1"

	if [ "$file" = - ]; then
		request file -
	elif [ -d "$file" ]; then
		# stderr is redirected to /dev/null to prevent the following from being displayed
		# tar: Removing leading / from absolute path names in the archive
		if "$verbose"; then
			echo "\$ tar cf - "$file" 2> /dev/null"
		fi
		if "$execute"; then
			tar cf - "$file" 2> /dev/null | request file - || exit_with_error 'error: tar archival failed'
		else
			request file -
		fi
	elif [ -e "$file" ]; then
		request file "$file"
	else
		exit_with_error "error: $file does not exist"
	fi
}

dispatch_url() {
	url="$1"

	[ ! "$#" = 1 ] && exit_with_error "$USAGE"
	is_valid_url "$url" || exit_with_error 'error: invalid url'

	request url "$url"
}

dispatch_shorten() {
	url="$1"

	[ ! "$#" = 1 ] && exit_with_error "$USAGE"
	is_valid_url "$url" || exit_with_error 'error: invalid url'

	request shorten "$url"
}

# ---Dispatcher---
dispatch() {
	command_modifier="$1"

	# shift fails if there are no arguments to shift.
	[ "$#" -lt 2 ] && exit_with_error "$USAGE"

	shift

	while getopts "vn" flag; do
		case "$flag" in
			v) verbose=true;;
			n) execute=false;;
			*) exit_with_error "$USAGE"
		esac
	done

	shift $((OPTIND-1))

	# only continue if only one file name is provided
	[ "$#" -eq 1 ] || exit_with_error "$USAGE"

	target="$1"

	case "$command_modifier" in
		file)
			dispatch_file "$target"
			;;
		url)
			dispatch_url "$target"
			;;
		shorten)
			dispatch_shorten "$target"
			;;
		*)
			exit_with_error "$USAGE"
	esac
}

# ---Entry point---
dispatch "$@"
